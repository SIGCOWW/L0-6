= 風邪声判定および風邪声声質変換のための音声分析・基礎的検討
@<author>{ポートガス・D・, Sython;twitter:SythonUK}
//profile{
D進のDはDelightのD
//}

//lead{
乾いた風邪が 心通り抜ける 溢れる鼻水 連れ去ってほしい
//}

== はじめに

2018年も終わりに近づき，平成最後の年が終わろうとしています．皆様いかがお過ごしでしょうか．
東京も日に日に寒さを増し，北国出身の私も平成最後の寒さに凍えながら毎日を過ごしております．
そんな中，やはり気をつけたいのは風邪です．年末の忙しい時期に風邪をひくと色々とつらいことでしょう．
一方で，年末の忙しい時期に風邪をひいたということにして，
つらい現実@<fn>{tsurai}から逃避したいという気持ちもあるかもしれません．
平成最後の本稿では，@<b>{(1)風邪をひいたかもしれないという人が，声だけで風邪かどうかを判定できるかどうか，}
そして@<b>{(2)通常の状態で録音された音声を風邪声っぽく変換することが可能かどうか}の基礎的検討を行います．
//footnote[tsurai][迫る冬コミ原稿締切，学会発表原稿提出，ジャーナル執筆，etc...]

== データ

音声コーパスとして日本声優統計学会@<fn>{seiyu}により公開されている「声優統計コーパス」を利用しました．
今回の実験では，
某大学の男子大学院生Sさん@<fn>{Ssan}が風邪を引いていないときに収録した音声と，
Sさんが風邪をひいていたときに頑張って収録した音声を分析・比較します．
収録当時の自覚症状を以下に示します．
//footnote[seiyu][@<href>{https://voice-statistics.github.io/}]
//footnote[Ssan][Vol.5で用いたものです．]

 * 軽度な鼻水
 * 中度な頭痛
 * 軽度な身体のだるさ
 * 学会発表のための原稿執筆や，ジャーナル執筆作業による重度なつらみ

== 音声特徴量分析

音声特徴量の分析に山梨大学の森勢先生によって開発されたWORLD@<fn>{world}（のPythonラッパーであるpyworld@<fn>{pyworld}）を利用し，
声帯振動の特性を基本周波数 (F0) と非周期性指標（AP: APeriodicity），
声道フィルタの特性をスペクトル包絡の特徴量（メルケプストラム係数: MCEP）として抽出しました．
WORLDスペクトル包絡からメルケプストラム係数への変換には，
音声信号処理ツールキットSPTK@<fn>{sptk}（のPythonラッパーであるpysptk@<fn>{pysptk}）を利用しました．
//footnote[world][@<href>{http://www.kki.yamanashi.ac.jp/~mmorise/world/index.html}]
//footnote[pyworld][@<href>{https://github.com/JeremyCCHsu/Python-Wrapper-for-World-Vocoder}]
//footnote[sptk][@<href>{http://sp-tk.sourceforge.net/}]
//footnote[pysptk][@<href>{https://github.com/r9y9/pysptk}]

=== 音声発話長

風邪をひくと，そもそも声を出すのがつらくなり，発話の速度が通常よりも遅くなることが考えられます．
これを検証するために，音声の発話長のヒストグラムを作成した結果を@<img>{dur_hist}に示します@<fn>{dur}．
全体的に，風邪をひいたときに収録された音声の発話長（図中の灰色バー）は，
そうでない通常のときに収録されたもの（図中の青色バー）と比較して長くなっていることが確認できます．

//image[dur_hist][音声の発話長のヒストグラム．この図は，声優統計コーパスの91〜100番目の文章を読み上げた音声から作成した．][scale=0.8]
//footnote[dur][発話前後の無音区間は削除しました．]

=== F0

風邪をひくと，喉が痛かったりで普段よりも高い声を出しにくくなると考えられます．
また，普段のしゃべり方よりも抑揚がなくなり，平坦な声となることも推測されます．
これらを検証するために，まず，
音声から実際に抽出されたF0のヒストグラムを作成しました．
Sさん（通常）の結果を@<img>{f0hist_normalS}に，
Sさん（風邪）の結果を@<img>{f0hist_kazegoeS}にそれぞれ示します．
図より，風邪をひいた場合のF0の分布は，通常の場合と比較して鋭くなっていることが確認できます．
また，その平均値も，通常の場合と比較して小さくなっていそうです．
実際に計算した対数F0の平均と分散の値を@<table>{lf0_stats}に示します．
確かに，風邪をひくと対数F0の平均・分散ともに小さくなっていることが確認できます．実際の対数F0系列(@<img>{logF0})@<fn>{DTW}を見ても，抑揚のなさがわかります．

//subfig[F0のヒストグラム．この図は，声優統計コーパスの91〜100番目の文章を読み上げた音声から作成した．]{
//image[f0hist_normalS][Sさん（通常）][scale=0.5]
//image[f0hist_kazegoeS][Sさん（風邪）][scale=0.5]
//}

//tabooular[lf0_stats][対数F0の統計量]{
          | 平均    &     分散
 =========|<======>&=========
 Sさん（通常）| 4.8034 & 0.036487
 Sさん（風邪）| 4.6920 & 0.017122
//}

//image[logF0][音声の対数F0の時系列プロット．この図は，声優統計コーパスの91番目の文章を読み上げた音声から作成した．][scale=0.8]
//footnote[DTW][2つの系列の長さは，Dynamic Time Warping (DTW)によって揃えました．]

=== MCEP

重度な風邪をひいた場合，呂律が回らなくなって発音が曖昧になることがあると思います．
が，今回収録してもらったSさんは，そこまで深刻な状態ではなかったため，発音に関しては通常の状態とそこまで差が生じていないように感じました@<fn>{recording}．
では，MCEPの領域では，通常の状態と風邪をひいている状態でどのような差が生じるのでしょうか？
とりあえず，F0の分析と同様に，MCEPの平均と分散を計算してみました．
平均のプロットを@<img>{mcep_mean}に，
分散のプロットを@<img>{mcep_var}にそれぞれ示します．
@<img>{mcep_mean}より，MCEPの平均に関しては，通常の状態と風邪をひいた状態とでそこまで差がないことがわかります．
一方で，@<img>{mcep_var}を見ると，
音声のパワーに関連する0次のMCEPの分散は，風邪をひくと小さくなり，
高次のMCEPの分散は，風邪をひくと大きくなることが確認できます．
パワーの分散が小さくなるのは，F0の分析結果からある程度類推できるのですが，
高次のMCEPの分散が大きくなるのは非常に面白い結果だと思います@<fn>{why_mcep}．

//subfig[MCEPの統計量．この図は，声優統計コーパスの91〜100番目の文章を読み上げた音声から作成した．]{
//image[mcep_mean][平均][scale=0.5]
//image[mcep_var][分散（縦軸は対数スケール）][scale=0.5]
//}

//footnote[recording][収録の際に噛むこともありましたが，噛まないテイクのみを採用しました．噛んでしまったテイクも含めて分析してみると，さらにおもしろい結果が出るかもしれません（やるとは言っていない）．]
//footnote[why_mcep][なぜこのような結果になったかは，正直わかりません．実際，MCEPの各次元が音声知覚とどのように対応付いているかはまだ謎が多いです．]

=== AP

APは，声のかすれ具合を表す特徴量であり，
風邪をひいたときに最も大きな差が生じることが予想されます．
F0，MCEPと同様に，
APの平均と分散の値を計算してみました．
@<table>{ap_stats}に結果を示します．
表より，APの平均は，風邪をひくと大きくなり，
分散は小さくなることが確認できます．

//tabooular[ap_stats][APの統計量]{
          | 平均    &     分散
 =========|<======>&=========
 Sさん（通常）| 0.4583 & 0.043387
 Sさん（風邪）| 0.5412 & 0.029487
//}

=== 音声特徴量分析結果まとめ

ここまでの結果から，風邪を引いたときの音声特徴量の変化についてまとめます．

: 音声発話長が長くなる

: F0の平均・分散がともに小さくなる

: MCEPの0次成分の分散が小さくなり，高次成分の分散が大きくなる

: APの平均が大きくなり，分散が小さくなる


== 深層学習を用いた音声からの風邪判定

入力された音声から，その話者が風邪をひいているかどうかを判定する風邪判定器（@<img>{kaze_disc}）を構築します．
本稿では，Deep Neural Network (DNN)を用いた風邪判定器@<fn>{d}の学習を行います．

//image[kaze_disc][風邪判定器のコンセプト][scale=0.8]

=== 風邪判定DNNの学習

風邪判定DNN @<m>{D(\bm{\cdot\})}は，入力された音声特徴量から，その話者が風邪を引いているかどうかを判定します．
風邪判定DNNの学習時には，次式で定義される損失を最小化します．
//texequation{
L_{\rm D}(\bm{y}^{\rm ill}, \bm{y}^{\rm normal}) = L_{\rm D,1}(\bm{y}^{\rm ill}) + L_{\rm D,0}(\bm{y}^{\rm normal})
//}
//texequation{
L_{\rm D,1}(\bm{y}^{\rm ill}) = -\sum_{t} \log D(\bm{y}^{\rm ill}_{t}), \quad L_{\rm D,0}(\bm{y}^{\rm normal}) = -\sum_{t} \log ( 1 - D(\bm{y}^{\rm normal}_t) )
//}
ここで，@<m>{L_{\rm D,1\}(\bm{\cdot\})}と@<m>{L_{\rm D,0\}(\bm{\cdot\})}はそれぞれ風邪音声と通常音声に対する損失です．
@<m>{L_{\rm D\}(\bm{\cdot\})}の最小化により，風邪判定DNNは風邪音声に対して1を，通常音声に対して0を出力するように学習されます．

//footnote[d][本稿では3層のFeed-Forwardネットワークを用います．隠れ素子数は128，隠れ層の活性化関数はReLU、出力層の活性化関数はsigmoidです．]

=== 風邪判定DNNの学習結果

本稿では，MCEP（とその動的特徴量@<fn>{delta}）から風邪判定を行うDNNを学習させました@<fn>{excuse}．
声優統計コーパスの1〜90番目の文章を学習データ，91〜100番目の文章を評価データとし，判定の正解率を計算しました．
@<img>{accuracy}に結果を示します．
図より，
学習データに対する正解率は，ほぼ100％に近いものになっています．
評価データに対しては正解率97％程度でサチっていますが，
もう少しリッチな特徴量を使えばもう少し改善すると思います．

//footnote[delta][MCEPの時間変化（1次差分）の情報を持った特徴量です．]
//footnote[excuse][本当は特徴量の組み合わせとかも検討したり，support vector machineとかも使いたかったのですが，時間の都合上厳しかったのでダメでした．]
//image[accuracy][風邪判定DNNの正解率][scale=0.8]

== 深層学習を用いた風邪声声質変換

深層学習を用いて，通常話者の音声を風邪声っぽくする風邪声声質変換（@<img>{kaze_vc}）を実現します．
本稿では，
風邪識別と同様に，DNNを用いた風邪声声質変換器の学習を行います．

//image[kaze_vc][風邪声声質変換のコンセプト][scale=0.8]

=== 風邪声声質変換DNNの学習

風邪声声質変換DNN @<m>{G(\bm{\cdot\})}は，
入力された通常話者の音声特徴量を，
風邪声話者の音声特徴量に変換します．
DNNアーキテクチャは，L0 Vol.3およびVol.5と同様のinput-to-output highway network@<fn>{highway}（@<img>{highway}）を用いました．
ここで，同図中の
@<m>{\bm{x\}}は変換前の音声特徴量，
@<m>{\bm{\hat y\}}は変換後の音声特徴量です．
@<m>{\bm{\hat y\}}は次式で推定されます．
//texequation{
\bm{\hat y} = \bm{x} + \bm{T} (\bm{x}) \circ \bm{G} (\bm{x})
//}
@<m>{\bm{G\}(\bm{\cdot\})}は差分特徴量推定器@<fn>{g}であり，
入出力特徴量の差分@<m>{\bm{y\} - \bm{x\}}を推定する役割を持っています．
@<m>{\bm{T\}(\bm{\cdot)\}}はhighway networkのtransform gate@<fn>{tgate}であり，
入力特徴量@<m>{\bm{x\}}に応じて@<m>{\bm{G\}(\bm{\cdot\})}の推定結果に重み付けをする役割を持っています．
ざっくり説明すると，違いが大きい部分はちゃんと変換して，違いが小さい部分は入力された特徴量をそのまま出力すればいい，という考え方です．
@<m>{\bm{G\}(\bm{\cdot\})}と@<m>{\bm{T\}(\bm{\cdot\})}は，
推定結果として得られる@<m>{\bm{\hat y\}}と，
変換先話者の音声特徴量@<m>{\bm{y\}}の二乗誤差
//texequation{
L_{\rm MSE}(\bm{y}, \bm{\hat y}) = (\bm{\hat y} - \bm{y})^\top (\bm{\hat y} - \bm{y})
//}
を最小化するように学習されます．
//image[highway][Input-to-output highway networks を用いた声質変換][scale=0.8]
//footnote[highway][@<href>{https://www.jstage.jst.go.jp/article/transinf/E100.D/8/E100.D_2017EDL8034/_article}]
//footnote[g][本稿では3層のFeed-Forwardネットワークを用います．隠れ素子数は256，隠れ層の活性化関数はReLU、出力層の活性化関数はLinearです．]
//footnote[tgate][1層のFeed-Forwardネットワークとして表現されます．出力層の活性化関数はsigmoidです．]


=== 風邪声声質変換DNNの学習結果
本稿では，通常話者のMCEPを風邪声っぽく変換するDNNを学習させました@<fn>{excuse_vc}．
学習・評価データについては，風邪判定DNNのものと同じです．
まず，学習後のDNNのtransform gateの例を@<img>{tgate}に示します．
この図において，gateの値が1に近い（つまり，赤に近い）ほど，
DNNはその入力特徴量を強く変換しようとしていることを意味します．
結果として，
風邪声声質変換DNNは，通常話者のMCEPの低域から中域にかけて強く変換しようとしていることが確認できます．

//image[tgate][Transform gateの値の例．この図は，声優統計コーパスの91番目の文章を読み上げた音声から作成した．][scale=0.8]
//footnote[excuse_vc][F0は入出力話者で線形変換し，APは入力話者のものをコピーします．本当はAPも変換したかった...]

今回の実験で生成した音声サンプルを@<fn>{samples}で公開しています．
波形生成には，WORLDボコーダを利用しました．
公開しているサンプルは以下のとおりです．

 * Source (N): Sさんの音声（通常）
 * Target (I): Sさんの音声（風邪）
 * Converted: 変換音声

筆者が聴いた感想として，
変換前の音声の話速は変わっていないため，
これによって風邪声っぽさが微妙に再現できていない気がします．
ただ，話速やイントネーションに関しては，変換前話者が頑張って合わせにいけばいいので，そこまで大きな問題ではないと思います．
変換音声では，風邪をひいてテンションが下がった感は上手く再現出来ている気がします．
厳密な評価をやったわけではないのですが，まとめとして，
@<b>{「通常音声を風邪声っぽく変換する風邪声声質変換は，それなりにうまく動作する」}
と言えそうです．
//footnote[samples][@<href>{http://sython.org/demo/kazeVC/demo.html}]

== おわりに

本稿では，
(1)入力音声の話者が風邪をひいているかどうかを判定するDNNの学習と，
(2)通常話者の音声を風邪声っぽく変換する風邪声声質変換DNNの学習を行いました．
結果として，判定・変換のどちらもそれなりに上手く動いてくれることを確認しました．
今後の課題としては，以下が考えられます．

=== 異常検知問題としての定式化
本稿では，通常話者と風邪声話者のパラレルデータが手に入るという理想的な条件で実験を行いました．
しかし，風邪をひいている話者の音声データを大量に集めるのは現実的ではないし，つらいです．
今後は，
@<b>{通常話者の音声は大量に入手可能だが，風邪をひいている（異常な）話者の音声は少量しか入手できない}という異常検知の枠組みで風邪声判定・変換を行えるようにする必要があると考えられます．

=== 用いる特徴量に関する調査
本稿では，MCEPを用いて風邪声判定・変換を行うという非常にシンプルな実験を行いました．
今後は，MCEP以外にもAPを用いて実験して，
どれだけ違う結果が得られるかどうか検証してみたいです．

=== 風邪の症状の深刻さを用いたモデル化
本稿では，「風邪をひいている or NOT」という2値分類の枠組みで風邪声判定・変換を行いました．
実際には，風邪の症状には段階があるはずで，単純な2値分類として解いてしまうのは面白くないです．
今後は，風邪の深刻さなども含めて段階的に判定したり，連続的に風邪声っぽさをいじれるような声質変換が実現できると面白くなりそうです．
